/*******************************************************************************
* Copyright (C) 2014, International Business Machines Corporation
* All Rights Reserved
*******************************************************************************/                          
namespace hdfsexample ;

use com.ibm.streamsx.hdfs::HDFS2FileSource;

/**
 * The [HDFS2FileSourceSampleTxtFormat] composite demonstrates how to use the HDFS2FileSink
 * operator to read a file from HDFS in "txt" format.
 *
 * Contrast from the HDFS2FileSource operator, HDFS2FileSink operator only supports writing in "line" format.
 * If your existing application currently uses the HDFS2FileSource operator to read data in as "txt" format,
 * you will need to modify your application in order to maintain reading data as "txt" format.
 * 
 * To continue reading in "txt" format, you can insert a "Custom" operator after the HDFS2FileSink operator
 * to convert a line as rstring to a tuple.  You can continue processing the tuple as you normally would.
 * 
 * To build this application, you need to set up the HADOOP_HOME environment variable as follows:
 * * export HADOOP_HOME=<Hadoop installation>
 * 
 * Setup:
 * To run this sample, you will need to copy the input file from the sample's data directory to 
 * the Hadoop File System:
 * 1. At the command line, go to the sample's data directory.
 * 1. Run the following command to copy the file from the data directory to HDFS:
 *   * <HADOOP_HOME>/bin/hadoop fs -copyFromLocal TxtFile.txt /user/<userId>
 * 
 * To compile and run this sample in Streams Studio:
 * 1. Start Streams Studio
 * 1. In Streams Explorer view, add the "com.ibm.streams.bigdata" toolkit as one of the toolkit locations
 * 1. From the main menu, select File -> Import.
 * 1. Expand IBM Streams Studio
 * 1. Select Sample SPL Application
 * 1. Select this sample from the Import SPL Sample Application dialog
 * 1. Once the sample is imported, wait for the build to finish.  If autobuild is turned off, select resulting project, right click -> Build Project
 * 1. Once the project is built, select the main composite of the sample, right click -> Launch Active Build Config
 * 
 * To compile and run this sample at the command line:
  *  1. Create a directory. For example, you can create a directory in your home directory.
  *   * mkdir $HOME/hdfssamples
  *  1. Copy the samples to this directory.
  *   * cp -R $STREAMS_INSTALL/toolkits/com.ibm.streams.bigdata/samples/* $HOME/hdfssamples/
  *  1. Build one of the sample applications. Go to the appropriate subdirectory and run the make. By default, the sample is compiled as a distributed application. If you want to compile the application as a standalone application, run make standalone instead. Run make clean to return the samples back to their original state.
  *  1. Run the sample application.  
  *   * To run the HDFS2FileSourceSampleTxtFormat sample application in distributed mode, start your IBM Streams instance, then use the streamtool command to submit the .adl files that were generated during the application build. 
  *    * streamtool submitjob -i <instance_name> output/Distributed/hdfsexample::HDFS2FileSourceSampleTxtFormat/hdfsexample.HDFS2FileSourceSampleTxtFormat.adl
  *   * To run the HDFS2FileSourceSampleTxtFormat sample application in standalone mode, issue the command:
  *    * ./output/Standalone/hdfsexample::HDFS2FileSourceSampleTxtFormat/bin/standalone
 */
composite HDFS2FileSourceSampleTxtFormat {
	type
		PersonSchema = int32 id, rstring fname, rstring lname, int32 age,
			rstring gender, float32 score, float64 total ;
	graph
		// read file "TxtFile.txt" from /user/<userid>/ on HDFS
		stream<rstring lines> LineStream = HDFS2FileSource()
		{
			param
				file : "txtFile.txt" ;
		}


		//convert the LineStream into txt format and write to a file
		stream<PersonSchema> tupleValue = Custom(LineStream)
		{
			logic
				onTuple LineStream : {
					printStringLn(lines);					
					submit((tuple<PersonSchema>) LineStream.lines, tupleValue) ;
				}
		}

		// write content of file to "TxtSink.txt" in the sample's data directory
		() as textSink1 = FileSink(tupleValue)
		{
			param
				file : "TxtSink.txt" ;
		}

}
