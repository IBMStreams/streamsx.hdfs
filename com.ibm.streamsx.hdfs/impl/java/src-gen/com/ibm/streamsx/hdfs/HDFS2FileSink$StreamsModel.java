package com.ibm.streamsx.hdfs;
import com.ibm.streams.operator.metrics.Metric.Kind;
import com.ibm.streams.operator.model.InputPortSet.WindowMode;
import com.ibm.streams.operator.model.InputPortSet.WindowPunctuationInputMode;
import com.ibm.streams.operator.model.OutputPortSet.WindowPunctuationOutputMode;

@com.ibm.streams.operator.model.PrimitiveOperator(name="HDFS2FileSink", namespace="com.ibm.streamsx.hdfs", description="The `HDFS2FileSink` operator writes files to a Hadoop Distributed File System. \n\nThe `HDFS2FileSink` operator is similar to the `FileSink` operator. \nThis operator writes tuples that arrive on its input port to the output file that is named by the **file** parameter. \nYou can optionally control whether the operator closes the current output file and creates a new file for writing based on the size \nof the file in bytes, the number of tuples that are written to the file, or the time in seconds that the file is open for writing, \n\nor when the operator receives a punctuation marker. \n# Behavior in a consistent region \n\nThe `HDFS2FileSink` operator can participate in a consistent region, however this is not supported when connecting to IBM Analytics Engine on IBM Cloud. \nThe operator can be part of a consistent region, but cannot be at the start of a consistent region. \nThe operator guarantees that tuples are written to a file in HDFS at least once, \nbut duplicated tuples can be written to the file if application failure occurs. \n\nFor the operator to support consistent region, the Hadoop Distributed File System must be configured with file append \nenabled. For information about how to properly enable this feature, refer to the documentation of your Hadoop distribution. \n\nOn drain, the operator flushes its internal buffer to the file. \nOn checkpoint, the operator stores the current file name, file size, tuple count, and file number to the checkpoint. \nOn reset, the operator closes the current file, and opens the file from checkpoint. \nFile states like file size and tuple count are reset to the file. \nThe file is opened in append mode, and data is written to the end of the file. \n\n# Exceptions \n\nThe `HDFS2FileSink` operator terminates in the following cases: \n* The operator cannot connect to HDFS. \n* The file cannot be written. \n\n+ Examples \n\nThis is a basic example using the `HDFS2FileSink` operator to write output to a Hadoop filesystem deployed on IBM Cloud (IBM Analytics Engine). \n\n     () as Sink= HDFS2FileSink(Input){ \n          param \n             file          : \"/user/clsadmin/myfile.txt\"; \n             hdfsUri       : \"webhdfs://server_host_name:port\"; \n             hdfsUser      : \"clsadmin\"; \n             hdfsPassword  : \"IAEPassword\"; \n     } \n\n\nThis example uses the `HDFS2FileSink` operator to write tuples to output files that have names like `output0.txt`. SSL certificate validation is enabled. \n\n     stream<PersonSchema> In = FileSource(){ \n         param \n             file          : \"Input.txt\"; \n     } \n\n\n     stream<rstring PersonSchemString> SingleStringIn = Functor(In){ \n        output \n            SingleStringIn : PersonSchemString =(rstring) In ; \n     } \n\n\n     () as txtSink = HDFS2FileSink(SingleStringIn){ \n          param \n             file             : \"output%FILENUM.txt\"; \n             bytesPerFile     : (int64)(16*1024); \n             hdfsUri          : \"webhdfs://server_host_name:port\"; \n             hdfsUser         : \"clsadmin\"; \n             hdfsPassword     : \"IAEPassword\"; \n             keyStorePassword : \"storepass\"; \n             keyStorePath     : \"etc/store.jks\"; \n     }")
@com.ibm.streams.operator.model.Icons(location32="impl/java/icons/HDFS2FileSink_32.gif", location16="impl/java/icons/HDFS2FileSink_16.gif")
@com.ibm.streams.operator.model.InputPorts(value={@com.ibm.streams.operator.model.InputPortSet(description="The `HDFS2FileSink` operator has one input port, which writes the contents of the input stream to the file that you specified. \nThe input port is non-mutating, and its punctuation mode is `Oblivious`.  The HDFS2FileSink supports writing data into HDFS in two formats. \nFor line format, the schema of the input port is tuple<rstring line> or tuple<ustring line>, which specifies a single rstring or ustring attribute that represents \na line to be written to the file. For binary format, the schema of the input port is tuple<blob data>, which specifies a block of data to be written to the file.", cardinality=1, optional=true, controlPort=false, windowingMode=WindowMode.NonWindowed, windowPunctuationInputMode=WindowPunctuationInputMode.Oblivious)})
@com.ibm.streams.operator.model.OutputPorts(value={@com.ibm.streams.operator.model.OutputPortSet(description="The `HDFS2FileSink` operator is configurable with an optional output port. \nThe output port is non-mutating and its punctuation mode is `Free`. \nThe schema of the output port is <string fileName, uint64 fileSize>, which specifies the name and size of files that are written to HDFS.", cardinality=1, optional=true, windowPunctuationOutputMode=WindowPunctuationOutputMode.Free)})
@com.ibm.streams.operator.model.SharedLoader()
@com.ibm.streams.operator.internal.model.ShadowClass("com.ibm.streamsx.hdfs.HDFS2FileSink")
@javax.annotation.Generated("com.ibm.streams.operator.internal.model.processors.ShadowClassGenerator")
public class HDFS2FileSink$StreamsModel extends com.ibm.streams.operator.AbstractOperator
 {

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the uniform resource identifier (URI) that you can use to connect to \nthe HDFS file system.  The URI has the following format:\n* To access HDFS locally or remotely, use `hdfs://hdfshost:hdfsport` \n* To access GPFS locally, use `gpfs:///`. \n* To access GPFS remotely, use `webhdfs://hdfshost:webhdfsport`. \n* To access HDFS via a web connection for HDFS deployed on IBM Analytics Engine, use `webhdfs://webhdfshost:webhdfsport`. \n\nIf this parameter is not specified, the operator expects that the HDFS URI is specified as the `fs.defaultFS` or `fs.default.name` property in the `core-site.xml` HDFS configuration file.  The operator expects the `core-site.xml` \nfile to be in `$HADOOP_HOME/../hadoop-conf` or `$HADOOP_HOME/etc/hadoop`  or in the directory specified by the **configPath** parameter. \n**Note:** For connections to HDFS on IBM Analytics Engine, the `$HADOOP_HOME` environment variable is not supported and so either  **hdfsUri** or **configPath**  must be specified.")
@com.ibm.streams.operator.internal.model.MethodParameters({"hdfsUri"})
public void setHdfsUri(java.lang.String hdfsUri) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the user ID to use when you connect to the HDFS file system. \nIf this parameter is not specified, the operator uses the instance owner ID to connect to HDFS. \nWhen connecting to Hadoop instances on IBM Analytics Engine, this parameter must be specified otherwise the connection will be unsuccessful. \nWhen you use Kerberos authentication, the operator authenticates with the Hadoop file system as the instance owner by using the \nvalues that are specified in the **authPrincipal** and **authKeytab** parameters.  After successful authentication, the \noperator uses the user ID that is specified by the **hdfsUser** parameter to perform all other operations on the file system.")
@com.ibm.streams.operator.internal.model.MethodParameters({"hdfsUser"})
public void setHdfsUser(java.lang.String hdfsUser) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter specifies the policy that is used by the operator to handle HDFS connection failures. \nThe valid values are: `NoRetry`, `InfiniteRetry`, and `BoundedRetry`. The default value is `BoundedRetry`. \nIf `NoRetry` is specified and a HDFS connection failure occurs, the operator does not try to connect to the HDFS again. \nThe operator shuts down at startup time if the initial connection attempt fails. \nIf `BoundedRetry` is specified and a HDFS connection failure occurs, the operator tries to connect to the HDFS again up to a maximum number of times. \nThe maximum number of connection attempts is specified in the **reconnectionBound** parameter.  The sequence of connection attempts occurs at startup time. \nIf a connection does not exist, the sequence of connection attempts also occurs before each operator is run. \nIf `InfiniteRetry` is specified, the operator continues to try and connect indefinitely until a connection is made. \nThis behavior blocks all other operator operations while a connection is not successful. \nFor example, if an incorrect connection password is specified in the connection configuration document, the operator remains in an infinite startup loop until a shutdown is requested.")
@com.ibm.streams.operator.internal.model.MethodParameters({"reconnectionPolicy"})
public void setReconnectionPolicy(java.lang.String reconnectionPolicy) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter specifies the number of successive connection attempts that occur when a connection fails or a disconnect occurs. \nIt is used only when the **reconnectionPolicy** parameter is set to `BoundedRetry`; otherwise, it is ignored. The default value is `5`.")
@com.ibm.streams.operator.internal.model.MethodParameters({"reconnectionBound"})
public void setReconnectionBound(int reconnectionBound) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter specifies the amount of time (in seconds) that the operator waits between successive connection attempts. \nIt is used only when the **reconnectionPolicy** parameter is set to `BoundedRetry` or `InfiniteRetry`; othewise, it is ignored.  The default value is `10`.")
@com.ibm.streams.operator.internal.model.MethodParameters({"reconnectionInterval"})
public void setReconnectionInterval(double reconnectionInterval) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the Kerberos principal that you use for authentication. \nThis value is set to the principal that is created for the IBM Streams instance owner. \nYou must specify this parameter if you want to use Kerberos authentication.")
@com.ibm.streams.operator.internal.model.MethodParameters({"authPrincipal"})
public void setAuthPrincipal(java.lang.String authPrincipal) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the file that contains the encrypted keys for the user that is specified by the **authPrincipal** parameter. \nThe operator uses this keytab file to authenticate the user. \nThe keytab file is generated by the administrator.  You must specify this parameter to use Kerberos authentication.")
@com.ibm.streams.operator.internal.model.MethodParameters({"authKeytab"})
public void setAuthKeytab(java.lang.String authKeytab) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies a file that contains login credentials. The credentials are used to connect to GPFS remotely by using the `webhdfs://hdfshost:webhdfsport` schema.  The credentials file must contain information about how to authenticate with IBM Analytics Engine when using the webhdfs schema. \nFor example, the file must contain the user name and password for an IBM Analytics Engine user. \nWhen connecting to HDFS instances deployed on IBM Analytics Engine, \nthe credentials are provided using the **hdfsUser** and **hdfsPassword** parameters.")
@com.ibm.streams.operator.internal.model.MethodParameters({"credFile"})
public void setCredFile(java.lang.String credFile) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the path to the directory that contains the `core-site.xml` file, which is an HDFS\nconfiguration file. If this parameter is not specified, by default the operator looks for the `core-site.xml` file in the following locations:\n* `$HADOOP_HOME/etc/hadoop`\n* `$HADOOP_HOME/conf`\n* `$HADOOP_HOME/lib` \n* `$HADOOP_HOME/`\n**Note:** For connections to Hadoop instances deployed on IBM Analytics Engine, the `$HADOOP_HOME` environment variable is not supported and should not be used.")
@com.ibm.streams.operator.internal.model.MethodParameters({"configPath"})
public void setConfigPath(java.lang.String configPath) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the password to use when you connecting to a Hadoop instance deployed on IBM Analytics Engine. \nIf this parameter is not specified, attempts to connect to a Hadoop instance deployed on IBM Analytics Engine will cause an exception.")
@com.ibm.streams.operator.internal.model.MethodParameters({"hadfsPassword"})
public void setHdfsPassword(java.lang.String hadfsPassword) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter is only supported when connecting to a Hadoop instance deployed on IBM Analytics Engine. \nIt specifies the path to the keystore file, which is in PEM format. The keystore file is used when making a secure connection to the HDFS server and must contain the public certificate of the HDFS server that will be connected to. \n**Note: If this parameter is omitted, invalid certificates for secure connections will be accepted.**  If the keystore file does not exist, or if the certificate it contains is invalid, the operator terminates.. \nThe location of the keystore file can be absolute path on the filesystem or a path that is relative to the application directory. \nSee the section on 'SSL Configuration' in the main page of this toolkit's documentation for information on how to configure the keystore. \nThe location of the keystore file can be absolute path on the filesystem or a path that is relative to the application directory.")
@com.ibm.streams.operator.internal.model.MethodParameters({"keyStorePath"})
public void setKeyStorePath(java.lang.String keyStorePath) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter is only supported when connecting to a Hadoop instance deployed on IBM Analytics Engine. \nIt specifies the password for the keystore file. This attribute is specified when the **keyStore** attribute is specified and the keystore file is protected by a password. \nIf the keyStorePassword is invalid the operator terminates.")
@com.ibm.streams.operator.internal.model.MethodParameters({"keyStorePassword"})
public void setKeyStorePassword(java.lang.String keyStorePassword) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter specifies the absolute path to the directory that contains the Hadoop library files. \nIf this parameter is omitted and `$HADOOP_HOME` is not set, the apache hadoop specific libraries within the `impl/lib/ext` folder of the toolkit will be used. \nWhen specified, this parameter takes precedence over the `$HADOOP_HOME` environment variable and the libraries within the folder indicated by `$HADOOP_HOME` will not be used.")
@com.ibm.streams.operator.internal.model.MethodParameters({"libPath"})
public void setLibPath(java.lang.String libPath) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter is relevant when connecting to IBM Analytics Engine on IBM Cloud. \nIt specifies the path to the directory that contains the Java Cryptography Extension policy files (US_export_policy.jar and local_policy.jar). \nThe policy files enable the Java operators to use encryption with key sizes beyond the limits specified by the JDK. \nSee the section on 'Policy file configuration' in the main page of this toolkit's documentation for information on how to configure the policy files. \nIf this parameter is omitted the JVM default policy files will be used. When specified, this parameter takes precedence over the JVM default policy files. \n\n**Note:** This parameter changes a JVM property. If you set this property, be sure it is set to the same value in all HDFS operators that are in the same PE. \nThe location of the policy file directory can be absolute path on the file system or a path that is relative to the application directory.")
@com.ibm.streams.operator.internal.model.MethodParameters({"policyFilePath"})
public void setPolicyFilePath(java.lang.String policyFilePath) {}

@com.ibm.streams.operator.model.Parameter(name="fileAttributeName", optional=true, description="If set, this points to an attribute containing the filename.  The operator will close a file when value of this attribute changes. \nIf the string contains substitutions, the check for a change happens before substituations, and the filename contains the substitutions based on the first tuple.")
@com.ibm.streams.operator.internal.model.MethodParameters({"fileAttr"})
public void setFilenameAttr(java.lang.String fileAttr) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the name of the file that the operator writes to. \nThe **file** parameter can optionally contain the following variables, which the operator evaluates at runtime to generate the file name:\n* %HOST         The host that is running the processing element (PE) of this operator. \n* %FILENUM        The file number, which starts at 0 and counts up as a new file is created for writing. \n* %PROCID        The process ID of the processing element. \n* %PEID         The processing element ID. \n* %PELAUNCHNUM    The PE launch count. \n* %TIME         The time when the file is created.  If the **timeFormat** parameter is not specified, the default time format is `yyyyMMdd_HHmmss`. \n\nFor example, if you specify a **file** parameter of `myFile%FILENUM%TIME.txt`, and the first three files are created in the afternoon on November 30, 2014, \nthe file names are `myFile020141130_132443.txt`, `myfile120141130_132443.txt`, and `myFile220141130_132443.txt`. \n\n**Important:** If the %FILENUM specification is not included, the file is overwritten every time a new file is created. \n")
@com.ibm.streams.operator.internal.model.MethodParameters({"file"})
public void setFile(java.lang.String file) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the name of the file that the operator writes to. \nWhen the file is closed the file is renamed to the final filename defined by the **file** parameter or **fileAttributeName** parameter. \nThe **tempFile** parameter can optionally contain the following variables, which the operator evaluates at runtime to generate the file name:\n* %HOST         The host that is running the processing element (PE) of this operator. \n* %PROCID        The process ID of the processing element. \n* %PEID         The processing element ID. \n* %PELAUNCHNUM    The PE launch count. \n* %TIME         The time when the file is created.  If the **timeFormat** parameter is not specified, the default time format is `yyyyMMdd_HHmmss`. \n**Important:** This parameter must not be used in a consistent region. \n")
@com.ibm.streams.operator.internal.model.MethodParameters({"tempfile"})
public void setTempFile(java.lang.String tempfile) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the time format to use when the **file** parameter value contains `%TIME`. \nThe parameter value must contain conversion specifications that are supported by the java.text.SimpleDateFormat. \nThe default format is `yyyyMMdd_HHmmss`.")
@com.ibm.streams.operator.internal.model.MethodParameters({"timeFormat"})
public void setTimeFormat(java.lang.String timeFormat) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the approximate size of the output file, in bytes. \nWhen the file size exceeds the specified number of bytes, the current output file is closed and a new file is opened. \nThe **bytesPerFile**, **timePerFile**, and **tuplesPerFile** parameters are mutually exclusive; you can specify only one of these parameters at a time.")
@com.ibm.streams.operator.internal.model.MethodParameters({"bytesPerFile"})
public void setBytesPerFile(long bytesPerFile) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the maximum number of tuples that can be received for each output file. \nWhen the specified number of tuples are received, the current output file is closed and a new file is opened for writing. \nThe **bytesPerFile**, **timePerFile**, and **tuplesPerFile** parameters are mutually exclusive; you can specify only one of these parameters at a time.")
@com.ibm.streams.operator.internal.model.MethodParameters({"tuplesPerFile"})
public void setTuplesPerFile(long tuplesPerFile) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies the approximate time, in seconds, after which the current output file is closed and a new file is opened for writing. \nThe **bytesPerFile**, **timePerFile**, and **tuplesPerFile** parameters are mutually exclusive; you can specify only one of these parameters.")
@com.ibm.streams.operator.internal.model.MethodParameters({"timePerFile"})
public void setTimePerFile(double timePerFile) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This parameter specifies whether the operator closes the current output file and creates a new file when a punctuation marker is received. \nThe default value is `false`.")
@com.ibm.streams.operator.internal.model.MethodParameters({"closeOnPunct"})
public void setCloseOnPunct(boolean closeOnPunct) {}

@com.ibm.streams.operator.model.Parameter(optional=true, description="This optional parameter specifies the encoding to use when reading files. The default value is `UTF-8`.")
@com.ibm.streams.operator.internal.model.MethodParameters({"encoding"})
public void setEncoding(java.lang.String encoding) {}
}