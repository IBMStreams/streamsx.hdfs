<?xml version="1.0" encoding="UTF-8"?>
<operatorModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <javaOperatorModel>
    <context>
      <description docHref="doc/${nl}/spldoc/html/tk$com.ibm.streamsx.hdfs/op$com.ibm.streamsx.hdfs$HDFS2FileSource.html">
The `HDFS2FileSource` operator reads files from a Hadoop Distributed File System (HDFS).

The operator opens a file on HDFS and sends out its contents in tuple format on its output port.  

If the optional input port is not specified, the operator reads the HDFS file that is specified in the **file** parameter and 
provides the file contents on the output port.  If the optional input port is configured, the operator reads the files that are 
named by the attribute in the tuples that arrive on its input port and places a punctuation marker between each file.

# Behavior in a consistent region

The `HDFS2FileSource` operator can participate in a consistent region.
The operator can be at the start of a consistent region if there is no input port.

The operator supports periodic and operator-driven consistent region policies.
If the consistent region policy is set as operator driven, the operator initiates a drain after a file is fully read.
If the consistent region policy is set as periodic, the operator respects the period setting and establishes consistent states accordingly.
This means that multiple consistent states can be established before a file is fully read.

At checkpoint, the operator saves the current file name and file cursor location.
If the operator does not have an input port, upon application failures, the operator resets
the file cursor back to the checkpointed location, and starts replaying tuples from the cursor location.
If the operator has an input port and is in a consistent region, the operator relies on its upstream operators
to properly reply the filenames for it to re-read the files from the beginning.

# Exceptions

The `HDFS2FileSource` operator terminates in the following cases:
 * The operator cannot connect to HDFS.
 * The file cannot be opened.
 * The file does not exist.
 * The file becomes unreadable.
 * A tuple cannot be created from the file contents (such as a problem with the file format).

+ Examples

This example uses the `HDFS2DirectoryScan` operator to scan the HDFS directory every two seconds and the `HDFS2FileSource`
operator to read the files that are output by the `HDFS2DirectoryScan` operator.
   
	/*
    * HDFS2DirectoryScan operator scans /user/myser/ directory from HDFS every 2.0 seconds
    * Overrides the URI in the fs.defaultFS option from core-site.xml file
    */
    (stream&lt;rstring filename> Files) as HDFS2DirectoryScan_1 = HDFS2DirectoryScan(){
      param
        directory     : &quot;/user/myuser/&quot;;
        hdfsUri:&quot;hdfs : //hdfsServer:1883&quot;;
        sleepTime     : 2.0;
    }
	// HDFS2FileSource operator reads from files discovered by HDFS2DirectoryScan operator
	(stream&lt;rstring data> FileContent) as HDFS2FileSource_2 =	HDFS2FileSource(Files){
	  param
	    hdfsUri:&quot;hdfs://hdfsSever:1883&quot;;
	 }

The following example shows how the operator accesses GPFS remotely and reads a file that is specified by the **file** parameter:

    (stream&lt;rstring data> FileContent) as HDFS2FileSource_2 = HDFS2FileSource(){
      param
        hdfsUri:&quot;webhdfs://bigInsightSever:1883&quot;; 
        file   :&quot;/user/myser/myfile.txt&quot;; 
    }

</description>
      <iconUri size="32">HDFS2FileSource_32.gif</iconUri>
      <iconUri size="16">HDFS2FileSource_16.gif</iconUri>
      <metrics>
        <metric>
          <name>nFilesOpened</name>
          <description sampleUri="">The number of files that are opened by the operator for reading data.</description>
          <kind>Counter</kind>
        </metric>
      </metrics>
      <executionSettings>
        <className>com.ibm.streamsx.hdfs.HDFS2FileSource</className>
        <vmArgs/>
      </executionSettings>
      <libraryDependencies>
        <library>
          <cmn:description>Java operator class library</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>../../impl/java/bin</cmn:libPath>
            <cmn:libPath>../../impl/lib/BigData.jar</cmn:libPath>
            <cmn:command></cmn:command>
          </cmn:managedLibrary>
        </library>
        <library>
          <cmn:description>apache library</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>@HADOOP_HOME@/../hadoop-conf</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/etc/hadoop</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/conf</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/share/hadoop/hdfs/*</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/share/hadoop/common/*</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/share/hadoop/common/lib/*</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/lib/*</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/client/*</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/*</cmn:libPath>
            <cmn:libPath>@HADOOP_HOME@/../hadoop-hdfs/*</cmn:libPath>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
      <codeTemplates>
        <codeTemplate name="HDFS2FileSource">
          <description sampleUri="">HDFS2FileSource basic template</description>
          <template>stream&lt;${streamType}> ${streamName} = HDFS2FileSource() {
                param
                file : &quot;${filename}&quot;;
                }</template>
        </codeTemplate>
        <codeTemplate name="HDFS2FileSource with hdfsUser and hdfsUri">
          <description sampleUri="">HDFS2FileSource template with optional parameters. If hdfsUri parameter is provided , operator will connect using the host and port given in the hdfsUri and if hdfsUser is provided , operator will connect using the user given in the hdfsUser.</description>
          <template>stream&lt;${streamType}> ${streamName} = HDFS2FileSource() {
                param
                file: &quot;${filename}&quot;;
                hdfsUser: &quot;${hdfsUser}&quot;;
                hdfsUri: &quot;${hdfsUri}&quot;;
                }</template>
        </codeTemplate>
      </codeTemplates>
    </context>
    <parameters>
      <description></description>
      <parameter>
        <name>file</name>
        <description>
This parameter specifies the name of the file that the operator opens and reads. 
This parameter must be specified when the optional input port is not configured.
If the optional input port is used and the file name is specified, the operator generates an error.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>initDelay</name>
        <description sampleUri="">
This parameter specifies the time to wait in seconds before the operator reads the first file.  
The default value is `0`.</description>
        <optional>true</optional>
        <type>float64</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>hdfsUri</name>
        <description>
This parameter specifies the uniform resource identifier (URI) that you can use to connect to 
the HDFS file system.  The URI has the following format:
 * To access HDFS locally or remotely, use `hdfs://*hdfshost*:*hdfsport*
 * To access GPFS locally, use `gpfs:///`.
 * To access GPFS remotely, use `webhdfs://*hdfshost*:*webhdfsport*

If this parameter is not specified, the operator expects that the HDFS URI is specified as the `fs.defaultFS` or 
`fs.default.name` property in the `core-site.xml` HDFS configuration file.  The operator expects the `core-site.xml` 
file to be in `$HADOOP_HOME/../hadoop-conf` or `$HADOOP_HOME/etc/hadoop`. </description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>hdfsUser</name>
        <description>
This parameter specifies the user ID to use when you connect to the HDFS file system.  
If this parameter is not specified, the operator uses the instance owner to connect to the HDFS file system.

When you use Kerberos authentication, the operator authenticates with the Hadoop file system as the instance owner by using the 
values that are specified in the **authPrincipal** and **authKeytab** parameters.  After successful authentication, the
operator uses the user ID that is specified by the **hdfsUser** parameter to perform all other operations on the file system.

**NOTE:** When using Kerberos authentication, the InfoSphere Streams instance owner must have super user privileges on HDFS or GPFS
to perform operations as the user that is specified by the **hdfsUser** parameter.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>authPrincipal</name>
        <description>
This parameter specifies the Kerberos principal that you use for authentication.
This value is set to the principal that is created for the InfoSphere Streams instance owner.
You must specify this parameter if you want to use Kerberos authentication.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>authKeytab</name>
        <description>
This parameter specifies the file that contains the encrypted keys for the user that is specified
by the **authPrincipal** parameter.  The operator uses this keytab file to authenticate the user.
The keytab file is generated by the administrator.  You must specify this parameter to use Kerberos authentication.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>credFile</name>
        <description>
This parameter specifies a file that contains login credentials. The credentials are used to
connect to GPFS remotely by using the `webhdfs://*hdfshost*:*webhdfsport*` schema.  The credentials file must contain information
about how to authenticate with IBM InfoSphere BigInsights when using the webhdfs schema.  For example, the file must contain the 
user name and password for an IBM InfoSphere BigInsights user.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>configPath</name>
        <description>
This parameter specifies the absolute path to the directory that contains the `core-site.xml` file, which is an HDFS
configuration file. If this parameter is not specified, the operator searches the default location for the `core-site.xml` file.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>encoding</name>
        <description>This parameter specifies the encoding to use when reading files. The default value is `UTF-8`.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>blockSize</name>
        <description>
		This parameter specifies the maximum number of bytes to be read at one time when reading a file into binary mode (ie, into a blob); thus, it is the maximum size of the blobs on the output stream. The parameter is optional, and defaults to `4096`.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>parallelRead</name>
        <description>If true, the operator assumes it is in a parallel region and processes the part of the input file corresponding to its channel.</description>
        <optional>true</optional>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>
The `HDFS2FileSource` operator has one optional input port. If an input port is specified, the operator expects
an input tuple with a single attribute of type rstring. The input tuples contain the file names that the operator opens for reading.
The input port is non-mutating.</description>
        <windowingDescription></windowingDescription>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <cardinality>1</cardinality>
        <optional>true</optional>
      </inputPortSet>
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <description>
The `HDFS2FileSource` operator has one output port.  The tuples on the output port contain the data that is read from the files.
The operator supports two modes of reading.  To read a file line-by-line, the expected output schema of the output port is tuple&lt;rstring line> or tuple&lt;ustring line>.
To read a file as binary, the expected output schema of the output port is tuple&lt;blob data>.  Use the blockSize parameter to control how much data to retrieve on each read.
The operator includes a punctuation marker at the conclusion of each file. The output port is mutating.</description>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <windowPunctuationInputPort>-1</windowPunctuationInputPort>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>
    </outputPorts>
  </javaOperatorModel>
</operatorModel>